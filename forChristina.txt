chapter 1

Modelling digital circuits with VHDL represents a modern digital design paradigm where the programmer writes in a descriptive manner a description of what the final logic circuit should do and a, hopefully intelligent, language compiler, in this case called synthesizer, attempts to ``infer'' what the actual final physical logic circuit should be. The direct consequence of it, is that novice programmers do not generally seem able to convince the synthesizer to implement what seems very clear in their mind.
A some how old-fashion alternative method to a descriptive language approach is a scenario where the programmer simply interconnects a finite number of digital blocks, that he pools from a library, in the attempt to reach the same objective. This approach is not only very time consuming but also inherently limiting and very error prone.
Modern digital design is more about appropriately modelling digital circuits and maintaining a quality description of the circuit. All that is left now is learning the description language and the associated digital design paradigm.


chapter 2

A good programmer distinguish himself by other means than perfectly remembering code syntax.

chapter 3

this new section was added
\section{VHDL Standard Libraries}
The VHDL language, has many programming languages, has gone through a long and intense evolution. Among the most important standardization steps we should mention the release of the \texttt{IEEE Standard 1164} package as well as some child standards that further extended the functionality of the language. In order to get advantage of the main implementable feature of VHDL you just need to import the three main library packages as shown in lines 2$\sim$5 of listing \ref{main_vhdl_lib}.

After the inclusion of the mentioned packages, you will have access to a very large set of goodies; several data types, overloaded operators, various conversion functions, math functions, etc.. For instance the inclusion of the package \texttt{std\_logic\_arith.all;} will give you the possibility of using the function shown in line 20 and 21 of listing \ref{main_vhdl_lib}. For a detailed description of what these libraries include, refer to the \texttt{Language Templates} of your favorite synthesis software tool (e.g. the yellow light bulb in the top panel of the Xilinx ISE software tool).


The constant is like a variable object type which value cannot be changed.


We will see later on in the book that any time we need a non-concurrent execution environment where code lines are executed one after the other (like in C or Java), we will be able to use the ``process'' construct. Inside a process, all instructions are executed consecutively from the top to the bottom.

